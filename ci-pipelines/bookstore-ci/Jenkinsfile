def shopapi
def shopui
def website

pipeline {
  options {
    skipStagesAfterUnstable()
    buildDiscarder(logRotator(numToKeepStr: '5'))
  }

  agent {
    kubernetes {
      yamlFile 'build-pod.yaml'
      defaultContainer 'security-tools'      
    }
  }
  environment {
    SCANNER_HOME = tool 'sonarqube-scanner-4.8.0'
    ORGANIZATION = "opeomotayo"
    // COSIGN_PASSWORD=credentials('cosign-password')
    COSIGN_PRIVATE_KEY=credentials('cosign-private-key')
    COSIGN_PUBLIC_KEY=credentials('cosign-public-key')
  }

  stages {
    stage('Clone Bookstore Repository') { 
      steps { 
        script {
          checkout scm
        }
      }
    }
    stage('Remove Old Images') { 
      steps {
        sh "docker system prune --all -f"
      }
    }

    stage('Build Image') {
      parallel {
        stage('Build ShopAPI Image') { 
          steps {
            dir('ci-pipelines/bookstore-ci/shop-api') {
              script {
                shopapi = docker.build("opeomotayo/shop-api")
              }
            }
          }
        }
        stage('Build ShopUI Image') { 
          steps {
            dir('ci-pipelines/bookstore-ci/shop-ui') {
              script {
                shopui = docker.build("opeomotayo/shop-ui")
              }
            }
          }
        }
        stage('Build Website Image') { 
          steps {
            dir('ci-pipelines/bookstore-ci/website') {
              script {
                website = docker.build("opeomotayo/website")
              }
            }
          }
        }
      }
    }

    stage('SonarQube Analysis') {
      parallel {
        stage('Analysis for ShopAPI') {
          steps{
            dir('ci-pipelines/bookstore-ci/shop-api') {
              withSonarQubeEnv('sonarqube-8.9.10') {
                sh '''$SCANNER_HOME/bin/sonar-scanner -Dsonar.organization=$ORGANIZATION \
                      -Dsonar.java.binaries=build/classes/java/ \
                      -Dsonar.projectKey=bookstore-shop-api \
                      -Dsonar.sources=.'''
              }
            }
          }
        }
        stage('Analysis for ShopUI') {
          steps{
            dir('ci-pipelines/bookstore-ci/shop-ui') {
              withSonarQubeEnv('sonarqube-8.9.10') {
                sh '''$SCANNER_HOME/bin/sonar-scanner -Dsonar.organization=$ORGANIZATION \
                      -Dsonar.java.binaries=build/classes/java/ \
                      -Dsonar.projectKey=bookstore-shop-ui \
                      -Dsonar.sources=.'''
              }
            }
          }
        }
        stage('Analysis for Website') {
          steps{
            dir('ci-pipelines/bookstore-ci/website') {
              withSonarQubeEnv('sonarqube-8.9.10') {
                sh '''$SCANNER_HOME/bin/sonar-scanner -Dsonar.organization=$ORGANIZATION \
                      -Dsonar.java.binaries=build/classes/java/ \
                      -Dsonar.projectKey=bookstore-website \
                      -Dsonar.sources=.'''
              }
            }
          }
        }
      }
    }

    stage('Quality Gate') {
      parallel {
        stage("Quality Gate for ShopAPI") {
          steps {
            timeout(time: 5, unit: 'MINUTES') {
              waitForQualityGate abortPipeline: true
            }
          }
        }
        stage("Quality Gate for ShopUI") {
          steps {
            timeout(time: 5, unit: 'MINUTES') {
              waitForQualityGate abortPipeline: true
            }
          }
        }
        stage("Quality Gate for Website") {
          steps {
            timeout(time: 5, unit: 'MINUTES') {
              waitForQualityGate abortPipeline: true
            }
          }
        }

      }
    }

    stage('Publish to Nexus') {
      parallel {
        stage('Publish ShopAPI') {
          steps { 
            script {  
              if (currentBuild.result == null || currentBuild.result == 'SUCCESS') {     
                docker.withRegistry('https://registry.hub.docker.com', 'dockerhub-creds') {
                  shopapi.push("${env.BUILD_NUMBER}")
                }
              }
            }
          }
        }
        stage('Publish ShopUI') {
          steps { 
            script {  
              if (currentBuild.result == null || currentBuild.result == 'SUCCESS') {     
                docker.withRegistry('https://registry.hub.docker.com', 'dockerhub-creds') {
                  shopui.push("${env.BUILD_NUMBER}")
                }
              }
            }
          }
        }
        stage('Publish Website') {
          steps { 
            script {  
              if (currentBuild.result == null || currentBuild.result == 'SUCCESS') {     
                docker.withRegistry('https://registry.hub.docker.com', 'dockerhub-creds') {
                  website.push("${env.BUILD_NUMBER}")
                }
              }
            }
          }
        }
      }
    }

    stage('Vulnerability Scan') {
      parallel {
        stage('Scan ShopAPI image') {
          steps {
            sh "grype opeomotayo/shop-api:$BUILD_NUMBER --scope AllLayers" //--fail-on=critical
          }
        }
        stage('Scan ShopUI image') {
          steps {
            sh "grype opeomotayo/shop-ui:$BUILD_NUMBER --scope AllLayers" //--scope AllLayers --fail-on=critical
          }
        }
        stage('Scan Website image') {
          steps {
            sh "grype opeomotayo/website:$BUILD_NUMBER --scope AllLayers" //--fail-on=critical
          }
        }
      }
    }

    stage('Sign Container Image') {
      parallel {
        stage('Sign ShopAPI Image') {
          steps {
            // sh 'echo "$DOCKER_HUB_PSW" | docker login -u $DOCKER_HUB_USR --password-stdin'
            sh "cosign sign --key $COSIGN_PRIVATE_KEY opeomotayo/shop-api:$BUILD_NUMBER"
          }
        }
        stage('Sign ShopUI Image') {
          steps {
            // sh 'echo "$DOCKER_HUB_PSW" | docker login -u $DOCKER_HUB_USR --password-stdin'
            sh "cosign sign --key $COSIGN_PRIVATE_KEY opeomotayo/shop-ui:$BUILD_NUMBER"
          }
        }
        stage('Sign Website Image') {
          steps {
            // sh 'echo "$DOCKER_HUB_PSW" | docker login -u $DOCKER_HUB_USR --password-stdin'
            sh "cosign sign --key $COSIGN_PRIVATE_KEY opeomotayo/website:$BUILD_NUMBER"
          }
        }
      }
    }

    
    
    stage('Trigger CD Job') {
      steps { 
        script {  
          sh "printenv"
          echo "triggering the pipeline that updates deployment image tag"
          def job = build job: 'bookstore-cd', parameters: [[$class: 'StringParameterValue', name: 'DOCKERTAG', value: "${env.BUILD_NUMBER}"]]
        }
      }    
    }
  }
}

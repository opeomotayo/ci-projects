def app
def db

pipeline {
  options {
    skipStagesAfterUnstable()
    buildDiscarder(logRotator(numToKeepStr: '5'))
  }

  agent {
    kubernetes {
      yamlFile 'build-pod.yaml'
      defaultContainer 'devops-tools'      
    }
  }

  stages {
    stage('Clone Repository') { 
      steps { 
        script {
          checkout scm
        }
      }
    }

    stage('Build App Image') { 
      steps {
        dir('ci-pipeliness/flask-blog-ci/app') {
          script {
            app = docker.build("opeomotayo/flask-blog")
          }
        }
      }
    }

    stage('Build DB Image') { 
      steps {
        dir('ci-pipeliness/flask-blog-ci/db') {
          script {
            db = docker.build("opeomotayo/mysql-blog")
          }
        }
      }
    }

    // stage('SonarQube Analysis') {
    //     steps{
    //         script{
    //             scannerHome = tool 'sonarqube-scanner';
    //         }
    //         withSonarQubeEnv('sonarqube-server') {
    //           sh "${scannerHome}/bin/sonar-scanner"
    //         }
    //     }
    // }

    stage('Push App and DB Images') {
        steps { 
            script {  
                if (currentBuild.result == null || currentBuild.result == 'SUCCESS') {     
                  docker.withRegistry('https://registry.hub.docker.com', 'dockerhub-access') {
                    app.push("${env.BUILD_NUMBER}")
                    db.push("${env.BUILD_NUMBER}")
                  }
                }
            }
        }
    }
    
    stage('Trigger flask-blog-cd') {
      steps { 
        script {  
          sh "printenv"
          echo "triggering the pipeline that updates deployment image tag"
          // paramAValue = "paramAValue"
          // paramBValue = "paramBValue"
          //  build job: 'flask-blog-cd', wait: false, parameters: [string(name: 'HELLO', value: "${env.BUILD_NUMBER}")]
          // build job: 'downstream-freestyle', parameters: [[$class: 'StringParameterValue', name: 'ParamA', value: paramAValue], [$class: 'StringParameterValue', name: 'ParamB', value: paramBValue]]
          def job = build job: 'flask-blog-cd', parameters: [[$class: 'StringParameterValue', name: 'DOCKERTAG', value: "${env.BUILD_NUMBER}"]]
        }
      }    
    }
  }
}
